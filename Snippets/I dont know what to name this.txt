/*
 * We needed a way to "weigh" leads based on records in a custom object for lead assignment
 * this builds a map based on a fieldset with the first item in the fieldset being the most important
 * orderd to the lest important. We query the records in our custom object, loop through each record
 * loop through the field set and look in order until a null value is reached and we eventually get the ID
 * the records.
 *
 * Then, we loop through leads, and loop through the map trying to find the Id of the record that is the
 * closest map.
 *
 * Our requirements changed midway through and this was never finished but I think it's a fun exercise and
 * want to work on it at a later date.
 */
Map<String, Object> map = new Map<String, Object>();

for (Territory__c co : [
    SELECT Fields__c
    FROM CustomObject__c
    WHERE Fields__c = 'Value'
]) {
    Map<String, Object> currentMap = map;
    
    // Using field sets allow us to change the field weight or what fields to consider without updating code
    for (FieldSetMember fsm : Schema.SObjectType.CustomObject__c.fieldSets.customFieldSet.getFields()) {
        if (co.get(fsm.getFieldPath()) != null) {
            if (currentMap.get(string.valueOf(co.get(fsm.getFieldPath()))) == null) { // value is not in map, so add it
                currentMap.put(string.valueOf(co.get(fsm.getFieldPath())), new Map<String, Object>());
            }
            
            try {
                currentMap = (Map<String, Object>) currentMap.get(string.valueOf(co.get(fsm.getFieldPath()))); // key returns map so move to next field in set
            } catch (Exception e) {
                break; // Duplicate records?
            }
        } else {
            // I may want this to go back 1 level as the ID is being associated to the last field, which is empty
            // This may/may not work as when we're looping through lead's, we'll be at the field level when we determine
            // that the map has ended as well.
            currentMap.put(string.valueOf(fsm.getFieldPath()), co.Id);
            break; // No reason to keep looking on this record
        }
    }
}

system.debug(string.valueOf(territoryMap));